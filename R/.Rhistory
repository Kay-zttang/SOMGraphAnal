file.exists("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.200.k3.r.200.cadj.viff")
for (input in inputs){
print(file.exists(input))
}
inputs = read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
for (input in inputs){
print(file.exists(input))
}
for (input in inputs){
print(sub('\\.cadj.viff$', '', tail(strsplit(param.table$CADJ_MATRIX, "/")[[1]],n=1)))
}
for (input in inputs){
print(sub('\\.cadj.viff$', '', tail(strsplit(input, "/")[[1]],n=1)))
}
strsplit(inputs[1], "/")[[1]]
inputs
strsplit(inputs$V1[1], "/")[[1]]
tail(strsplit(inputs$V1[1], "/")[[1]],n=1)
strsplit(tail(strsplit(inputs$V1[1], "/")[[1]],n=1), "[.]")
as.numeric(strsplit(tail(strsplit(inputs$V1[1], "/")[[1]],n=1), "[.]")[[1]])
complete.cases(as.numeric(strsplit(tail(strsplit(inputs$V1[1], "/")[[1]],n=1), "[.]")[[1]]))
suppressWarnings(as.numeric(strsplit(tail(strsplit(inputs$V1[1], "/")[[1]],n=1), "[.]")[[1]]))
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(inputs$V1[1], "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
step
data.df = data.frame(matrix(ncol = 4, nrow = 0))
colnames(data.df) <- c('steps', 'cadj_matrix', 'weight_cube', 'nunr')
file.exists
data.df
for (input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
weightc = gsub('.cadj.viff', '.wgtcub', input)
}else{
weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, c(step, input, weightc, nunrf))
}
gsub('.cadj.viff', '.wgtcub', input)
file.exists(gsub('.cadj.viff', '.wgtcub', input))
input
inputs = read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
#if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
#}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
#}
#nunrf = gsub('.cadj.viff', '.wgtcub', input)
#data.df = rbind(data.df, c(step, input, weightc, nunrf))
}
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
#if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
#}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
#}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, c(step, input, nunrf))
}
data.df
data.df = data.frame(matrix(ncol = 4, nrow = 0))
colnames(data.df) <- c('steps', 'cadj_matrix', 'weight_cube', 'nunr')
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
#if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
#}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
#}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, c(step, input, nunrf))
}
data.df
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
#if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
#}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
#}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, list(step, input, nunrf))
}
colnames(data.df) <- c('steps', 'cadj_matrix', 'nunr')
data.df = data.frame(matrix(ncol = 3, nrow = 0))
colnames(data.df) <- c('steps', 'cadj_matrix', 'nunr')
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
#if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
#}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
#}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, list(step, input, nunrf))
}
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
#if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
#}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
#}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, data.frame(steps = step, cadj_matrix = input, nunr = nunrf))
}
data.df
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
#weightc = gsub('.cadj.viff', '.wgtcub', input)
}else{
#weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, data.frame(steps = step, cadj_matrix = input, nunr = nunrf))
}
length(inputs)
nrow(inputs)
i in nrow(inputs)
for(i in 1:nrow(inputs)){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(inputs[i], "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
if(file.exists(gsub('.cadj.viff', '.wgtcub', inputs[i]))){
weightc = gsub('.cadj.viff', '.wgtcub', inputs[i])
}else{
weightc = gsub('.cadj.viff', '.wgt.xv', inputs[i]) #for older wgt cube file
}
nunrf = gsub('.cadj.viff', '.wgtcub', inputs[i])
data.df = rbind(data.df, data.frame(steps = step, cadj_matrix = inputs[i], nunr = nunrf))
}
readLines("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
inputs = read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
inputs
inputs[1,1]
inputs[2,1]
inputs = as.vector(read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm"))
inputs
inputs[1]
as.vector(read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")$V1)
inputs = as.vector(read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")$V1)
for (input in inputs){
print(sub('\\.cadj.viff$', '', tail(strsplit(input, "/")[[1]],n=1)))
}
inputs = as.vector(read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")$V1)
data.df = data.frame(matrix(ncol = 4, nrow = 0))
colnames(data.df) <- c('steps', 'cadj_matrix', 'weight_cube', 'nunr')
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
weightc = gsub('.cadj.viff', '.wgtcub', input)
}else{
weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, data.frame(steps = step, cadj_matrix = input, weight_cube = weightc, nunr = nunrf))
}
data.df
inputs = as.vector(read.table("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")$V1)
data.df = data.frame(matrix(ncol = 4, nrow = 0))
colnames(data.df) <- c('steps', 'cadj_matrix', 'weight_cube', 'nunr')
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
weightc = gsub('.cadj.viff', '.wgtcub', input)
}else{
weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, data.frame(steps = step, cadj_matrix = input, weight_cube = weightc, nunr = nunrf))
}
data.df
data.df = data.frame(matrix(ncol = 4, nrow = 0))
colnames(data.df) <- c('steps', 'cadj_matrix', 'weight_cube', 'nunr')
for(input in inputs){
step = suppressWarnings(as.numeric(strsplit(tail(strsplit(input, "/")[[1]],n=1), "[.]")[[1]]))
step = step[complete.cases(step)][1]
if(file.exists(gsub('.cadj.viff', '.wgtcub', input))){
weightc = gsub('.cadj.viff', '.wgtcub', input)
}else{
weightc = gsub('.cadj.viff', '.wgt.xv', input) #for older wgt cube file
}
nunrf = gsub('.cadj.viff', '.wgtcub', input)
data.df = rbind(data.df, c(step, input, weightc, nunrf))
}
data.df
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
library(SOMGraphAnal)
?load.parm_SOM
load.parm_SOM("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
devtools::document("SOMGraphAnal")
?load.parm_SOM
load.parm_SOM("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
devtools::document("SOMGraphAnal")
load.parm_SOM("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
devtools::document("SOMGraphAnal")
load.parm_SOM("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
?load.parm_SOM
library(SOMGraphAnal)
?load.parm_SOM
?load.graph_SOM
test = load.graph_SOM("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.10000.k3.r.10000.cadj.viff")
devtools::document("SOMGraphAnal")
library(SOMGraphAnal)
test = load.graph_SOM("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.10000.k3.r.10000.cadj.viff")
test$param.table
devtools::document("SOMGraphAnal")
?load.graph_SOM
test = load.graph_SOM("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.10000.k3.r.10000.cadj.viff")
devtools::install("SOMGraphAnal")
?load.graph_SOM
test = load.graph_SOM("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.10000.k3.r.10000.cadj.viff")
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
test = load.graph_SOM("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.10000.k3.r.10000.cadj.viff")
test$conn.graph
?load.graph_SOM
test$param.table
test$param.table$steps
createWorkbook()
createWorkbook()
openxlxs::createWorkbook()
openxlsx::createWorkbook()
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
calc.graph_property(test, save_to.excel = T, method = "hh")
calc.graph_property(test, save_to.excel = T, method = "activePEs")
res = calc.graph_property(test, save_to.excel = T, method = "activePEs")
#' Bulk load parameter table.
#'
#' This function search realated possible wwightcube .wgtcub/.wgt.xv file and
#' the class label .nunr file for the input list of CONN .cadj file for each
#' learning steps. And integrated as an output dataframe.
#'
#' @param infile Path to the input .parm/.txt file with the directories of .cadj file
#' @return A data frame with each row showing the current learning steps and
#' directories of related SOM files.
#' @noRd
bulk.calc_SOM
devtools::document("SOMGraphAnal")
library(SOMGraphAnal)
ts1 = load.parm_SOM("D:/__WORKING__/Dropbox/Graph-knw/Results-from-NScope-processing/Data/Iris/iris.6x6.10000.k3.r.10000.cadj.viff")
ts1
gts1 = load.graph_SOM(ts1)
gts1$steps
gts1$root
gst1
gts1
rests1 = calc.graph_property(gts1, save_to.excel = T, method = "activePEs")
####
####test case 2: Bulk CONN graphs on multiple stages
####
ts2 = bulk.parm_SOM("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
ts2
gts2 = bulk.calc_SOM(ts2)
gts2 = bulk.calc_SOM(ts2)
devtools::document("SOMGraphAnal")
####
####test case 2: Bulk CONN graphs on multiple stages
####
ts2 = bulk.parm_SOM("C:/Users/60973/Desktop/SOMGraphAnal_param.parm")
gts2 = bulk.calc_SOM(ts2)
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
gts2
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
data.frame()
gts2$graph.property
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
supervised = FALS
supervised = FALSE
!supervised
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
gts2
str(gts2)
devtools::document("SOMGraphAnal")
gts2 = bulk.calc_SOM(ts2)
str(gts2)
gts2
##########################################
#### Graph Measurements using igraph #####
##########################################
#### author. Ziting Tang #################
#### created. 10-May-2024 ################
#### latest modified. 15-Jul-2024 ########
##########################################
#### Basic code flow for calculating all graph measurements mentioned in exel sheets
#### under working folder "Graph-knw/Graph-Measurements". (related terminology and
#### eqs are referenced in Graph_properties.tex)
##########################################
#### Including imported file:
#### .cadj.viff - cadj matrix
#### .wgtcub - weight cube
#### .nunr - class label
#### Not including any application of graph visualization in this file. The color file
#### .ctab will not be imported and implemented in this case.
#### For unsupervised data with no nunr labels the unsupervised measures will not be calculated.
##########################################
##########################################
##########################################
#### Part I. Initialization ##############
##########################################
rm(list = ls())
options(scipen=999)
# if in terminal set CRAN repository
repo = "http://cran.us.r-project.org"
if (!require("igraph")) install.packages("igraph", repos = repo)
if (!require("here")) install.packages("here", repos = repo)
if (!require("dplyr")) install.packages("dplyr", repos = repo)
if (!require("NeuroScopeIO")){
if (!require("remotes")) install.packages("remotes", repos = repo)
remotes::install_github("somdisco/NeuroScopeIO")
}
suppressMessages(library(igraph))
suppressMessages(library(NeuroScopeIO))
#suppressMessages(library(rstudioapi))
suppressMessages(library(here))
suppressMessages(library(dplyr))
#mainDir = here() #mainDir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd("D:/__WORKING__/Dropbox/Graph-knw/Code/")
subDir <- "result"
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
mainDir = "D:/__WORKING__/Dropbox/Graph-knw/Code/"
setwd(mainDir)
subDir <- "result"
dir.create(file.path(mainDir, subDir), showWarnings = FALSE)
#### Data Import #########################
data = read.table("D:/__WORKING__/Dropbox/Graph-knw/Code/graph_measures_param.parm", col.names=c("key","value"))
param = setNames(as.list(data$value), data$key)
cadj = NeuroScopeIO::read_khoros_viff(
filename = param$CADJ_MATRIX, verbose = F)
img_x = ncol(cadj); img_y = nrow(cadj)
if(!is.null(param$WEIGHT_CUBE)){
W = NeuroScopeIO::read_khoros_viff(
filename = param$WEIGHT_CUBE, verbose = F)
som_x = ncol(W); som_y = nrow(W)
}
if(!is.null(param$NUNR_FILE)){
nunr = NeuroScopeIO::read_nunr(
filename = param$NUNR_FILE, som_x = som_x, som_y = som_y, img_x = img_x, img_y = img_y)
}
##########################################
##########################################
#str(W)
##########################################
#### Part II. Build Graph ################
##########################################
# str(cadj1)
cadj = cadj[,,1]; conn = cadj + t(cadj)
#### Choice 1: weighted adjacency matrix ######
gconn = graph_from_adjacency_matrix(conn, mode = "undirected", weighted = TRUE)
#### Choice 2: Binary weight matrix ######
if(param$BINARY_ADJM == 1){
conn = as.matrix((conn>0)+0)
gconn = graph_from_adjacency_matrix(conn, mode = "undirected")
}
classlabel = match(tolower(nunr$class), letters)
classlabel[is.na(classlabel)] = n_distinct(nunr$class) # NA class label will be assigned as the last number order
V(gconn)$species = classlabel
#### Choice 3: Exclude dead prototypes #####
if(param$ACTIVE_PE_ADJM == 1){
Isolated = which(degree(gconn)==0)
gconn = delete.vertices(gconn, Isolated)
}
##########################################
##########################################
##########################################
#### Part III. Measurements Calculation ##
##########################################
property = c()
n = length(V(gconn)) # order (# vertices)
deadPE = sum(degree(gconn)==0) #inactive prototypes
m = length(E(gconn)) # size (# edges)
property = append(property,c(n,deadPE,m))
shortdist = distances(gconn)
shortdist[is.infinite(shortdist)] <- 0
# max(shortdist) ## checking max shortest path (diameter)
diam = diameter(gconn) # diameter
# get_diameter(gconn1) ## get an example path with the related diameter
min_dis = min(shortdist) # min shortest path
avg_dis = mean_distance(gconn, details = TRUE)
# res: Average length of Shortest path
# unconnected: Unconnected pairs of nodes (count both)
property = append(property,c(diam,min_dis,avg_dis$res, avg_dis$unconnected))
vdegree = degree(gconn) # node degree vector
min_deg = min(vdegree) # min degree
max_deg = max(vdegree) # max dgeree
avg_deg = mean(vdegree) #avg degree
property = append(property,c(min_deg,max_deg,avg_deg))
cli_len = length(cliques(gconn)) # number of cliques
cli_num = clique_num(gconn) # number of maximal cliques
property = append(property,c(cli_len, cli_num))
c = transitivity(gconn,type = 'global') # Clustering Coefficient
c_weight = transitivity(gconn, type = 'weighted',weights = E(gconn)$weight)
c_weight[is.na(c_weight)] = 0
c_weighted = mean(c_weight) # Weighted Clustering Coefficient
property = append(property,c(c,c_weighted))
eig = eigen(conn)
eigen = eig$values # eigenvalues of CONN
max_eig = max(eigen) # max eigenvalue
min_eig = min(eigen) # min eigenvalue
avg_eig = mean(eigen) # avg eigenvalue
dom_eig = max(abs(eigen)) # Dominant eigenvalue
spec_gap = eigen[1]-eigen[2] # Spectral gap
g_energy = sum(abs(eigen)) # graph energy
property = append(property,c(max_eig, min_eig, avg_eig, dom_eig, spec_gap, g_energy))
#tmax: maximum theoretical graph level centralization score
c_d = centr_degree(gconn)$centralization # degree centrality index
c_d.tmax = centr_degree(gconn)$theoretical_max
c_c = centr_clo(gconn)$centralization # closeness centrality index
if (is.nan(c_c)){c_c = 'NaN'}
c_c.tmax = centr_clo(gconn)$theoretical_max
c_b = centr_betw(gconn)$centralization # betweenness centrality index
c_b.tmax = centr_betw(gconn)$theoretical_max
c_ev = centr_eigen(gconn)$centralization # eigenvector centrality index
c_ev.tmax = centr_eigen(gconn)$theoretical_max
c_h = centralize(harmonic_centrality(gconn), length(V(gconn))) ##harmonic centrality index in eq(9)
c_sc = centralize(subgraph_centrality(gconn), length(V(gconn))) ##subgraph centrality
# for subgraph centrality the function only calculated as binary adjacency Matrix as_adj(gconn)
# To get an orthonormal eigenbasis of eigenvectors (Normalization; already)
# typically dividing by its length sqrt(transpose(v)*v)
# manually calculation as belows:
# eig$vectors^2 %*% exp(eig$values)
c_wsc = centralize(eig$vectors^2 %*% exp(eig$values), length(V(gconn)))
property = append(property,c(c_d, c_d.tmax, c_c, c_c.tmax, c_b, c_b.tmax,
c_ev, c_ev.tmax, c_h, c_sc, c_wsc))
## supervised measurements #####
if(param$SUPERVISED == 1){
q = modularity(gconn, V(gconn)$species, weights = E(gconn)$weight) # Modularity under class label
property = append(property,q)
}
##########################################
##########################################
##########################################
#### Part IV. Result Output ##############
##########################################
output = strsplit(param$OUTPUT_CSV, split = ",")[[1]]
if(!is.null(param$OUTPUT_ROOT_NAME)){
org = param$OUTPUT_ROOT_NAME
}else{
org = sub('\\.cadj.viff$', '', tail(strsplit(param$CADJ_MATRIX, "/")[[1]],n=1))
}
stage = suppressWarnings(as.numeric(strsplit(org,"[.]")[[1]]))
stage = stage[complete.cases(stage)]
## save degree vector
if(output[1]==1){
df1 = data.frame(vdegree)
colnames(df1) = c(paste0(format(stage[1], big.mark = ","), ' steps'))
write.csv(df1,file=paste0('result/',org,'.degree.csv'),row.names=T)
}
## save eigenvalue vector
if(output[2]==1){
df2 = data.frame(eigen)
colnames(df2) = c(paste0(format(stage[1], big.mark = ","), ' steps'))
write.csv(df2,file=paste0('result/',org,'.eigenvalue.csv'),row.names=T)
}
## save property vector
if(output[3]==1){
df3 = data.frame(property)
colnames(df3) = c(paste0(format(stage[1], big.mark = ","), ' steps'))
row.names(df3) = c('Order (# vertices)','# Inactive prototypes (of 36)', 'Size (# edges)',
'Diameter (max shortest path)', 'Minimum shortest path length',
'Average shortest path length', '# Unconnected pairs of nodes',
'Minimum degree', 'Maximum degree', 'Average degree',
'# Cliques', '# Maximal cliques',
'Clustering coefficient', 'Weighted clustering coefficient',
'Maximum eigenvalue', 'Minimum eigenvalue', 'Average eigenvalue',
'Dominant eigenvalue (max(abs(eigenvalue)))',
'Spectral gap (eigval1-eigval2)','Graph energy (sum(abs(eigval)))',
'Degree centrality index', 'Degree centrality theoretical maximum',
'Closeness centrality index', 'Closeness centrality theorectical maximum',
'Betweenness centrality index', 'Betweenness centrality theoretical maximum',
'Eigenvector centrality index', 'Eigenvector centrality theoretical maximum',
'Harmonic centrality index',
'Subgraph centrality index', 'Weighted Subgraph centrality index')
write.csv(df3,file=paste0('result/',org,'.property.csv'),row.names=T)
}
devtools::document("SOMGraphAnal")
setwd(geted())
setwd(getwd())
setwd("D:/Rwd/SOMGraphAnal/R")
devtools::document("SOMGraphAnal")
rlang::last_trace()
